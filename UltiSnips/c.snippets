priority -50

snippet once "header guard" b
#ifndef ${1:`!p snip.rv = snip.fn.replace(".", "_").upper()`}
#define $1

${VISUAL}$0

#endif
endsnippet

snippet main "main" b
int main(int argc, char* argv[]) {
	${VISUAL}$0
	return 0;
}
endsnippet

snippet inc "#include local" b
#include "${1:`!p snip.rv = snip.basename`.${2:h}}"
endsnippet

snippet Inc "#include <..>" b
#include <$1>
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${VISUAL}$0
};
endsnippet

snippet enum "enum .."
enum $1 { $0 };
endsnippet

snippet fun "function"
${2:void} $1(${3:void}) {
	${VISUAL}$0
}
endsnippet

snippet dec "function/method declaration"
${2:void} $1(${3:void});$0
endsnippet

snippet if "if .."
if ($1) {
	${VISUAL}$2
}
endsnippet

snippet ife "if .. else .."
if ($1) {
	${VISUAL}$2
} else {
	$3
}
endsnippet

snippet ifee "if .. else if .. else .."
if $1) {
	${VISUAL}$2
} else if ($3) {
	$4
} else {
	$5
}
endsnippet

snippet eli "else if .."
else if ($1) {
	$2
}
endsnippet

snippet el "else .."
else {
	$1
}
endsnippet

snippet sw "switch .."
switch ($1) {
	${VISUAL}$0
}
endsnippet

snippet wh "while .."
while ($1) {
	${VISUAL}$0
}
endsnippet

snippet do "do .. while"
do {
	${VISUAL}$0
} while ($1);
endsnippet

snippet for "for .."
for (${1:int }${2:i} = ${3:0}; ${2} < $4; ${5:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet td "typedef .."
typedef $1 $2;$0
endsnippet

snippet def "#define .." b
#define $1
endsnippet

snippet ifndef "#ifndef .. #define .. #endif" b
#ifndef $1
#define ${1} ${2}
#endif
endsnippet

snippet #if "#if .. #endif" b
#if $1
${VISUAL}$0
#endif
endsnippet
