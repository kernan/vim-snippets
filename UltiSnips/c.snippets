priority 50

snippet def "#define .." b
#define $1
endsnippet

snippet ifndef "#ifndef .. #define .. #endif" b
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if .. #endif" b
#if ${1:condition}
${VISUAL}$0
#endif
endsnippet

snippet inc "#include local" b
#include "${1:`!p snip.rv = snip.basename`.${2:h}}"
endsnippet

snippet Inc "#include <..>" b
#include <$0>
endsnippet

snippet main "main" b
int main(int argc, char* argv[]) {
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for .."
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int .."
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet enum "enum .."
enum ${1:name} { $0 };
endsnippet

snippet once "header guard" b
#ifndef ${1:`!p snip.rv = snip.fn.replace(".", "_").upper()`}
#define $1

${VISUAL}$0

#endif
endsnippet

snippet td "typedef .."
typedef ${1:old_type} ${2:new_type};$0
endsnippet

snippet wh "while .."
while (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet do "do .. while"
do {
	${VISUAL}$0
} while (${1:condition});
endsnippet

snippet if "if .."
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if .. else .."
if (${1:condition}) {
	${VISUAL}$2
} else {
	$3
}
endsnippet

snippet ifee "if .. else if .. else .."
if ${1:condition}) {
	${VISUAL}$2
} else if (${3:condition}) {
	$4
} else {
	$5
}
endsnippet

snippet fprintf "fprintf"
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}$0
endsnippet

snippet printf "printf"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}$0
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${VISUAL}$0
};
endsnippet

snippet fun "function"
${2:void} ${1:function}(${3:void}) {
	${VISUAL}$0
}
endsnippet

snippet dec "function/method declaration"
${2:void} ${1:function}(${3:void});$0
endsnippet
