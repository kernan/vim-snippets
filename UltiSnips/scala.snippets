snippet main "main" b
def main(args: Array[String]) {
	${VISUAL}$0
}
endsnippet

snippet app "application" b
object $1 extends Application {
	${VISUAL}$0
}
endsnippet

snippet im "import .."
import $1
endsnippet

snippet obj "object .. "
object $1 {
	${VISUAL}$0
}
endsnippet

snippet cl ".. class(..) .."
$2class $1($3) {
	${VISUAL}$0
}
endsnippet

snippet enum "object .. extends Enumeration .."
object ${1} extends Enumeration {
	type $1 = Value
	val $3
}
endsnippet

snippet tr "trait .."
trait $1 {
	${VISUAL}$0
}
endsnippet

snippet def "def ..(..) .."
def $1($2) {
	${VISUAL}$0
}
endsnippet

snippet if "if .."
if ($1) {
	${VISUAL}$2
}
endsnippet

snippet ife "if .. else .."
if ($1) {
	${VISUAL}$2
} else {
	$3
}
endsnippet

snippet ifee "if .. else if .. else"
if ($1) {
	${VISUAL}$2
} else if ($3) {
	$4
} else {
	$5
}
endsnippet

snippet eli "else if .."
else if ($1) {
	$2
}
endsnippet

snippet el "else .."
else {
	$1
}
endsnippet

snippet wh "while .."
while ($1) {
	${VISUAL}$0
}
endsnippet

snippet do "do .. while .."
do {
	${VISUAL}$0
} while ($1)
endsnippet

snippet for "for .. <- .."
for ($1 <- $2) {
	${VISUAL}$0
}
endsnippet

snippet forto "for .. <- .. to .."
for ($1 <- $2 to $3) {
	${VISUAL}$0
}
endsnippet

snippet forun "for .. <- .. until .."
for ($1 <- $2 until $3) {
	${VISUAL}$0
}
endsnippet

snippet tru "try .. catch .."
try {
	${VISUAL}$1
} catch {
	case ex: $2 => {
		$3
	}$4
}
endsnippet

snippet tryf "try .. catch .. finally"
try {
	${VISUAL}$1
} catch {
	case ex: $2 => {
		$3
	}$4
} finally {
	$5
}
endsnippet
